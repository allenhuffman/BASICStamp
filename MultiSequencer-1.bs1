' =========================================================================
'
'   File....... MultiSequencer.BS1
'   Purpose.... Multitasking Sequencer Engine for Props
'   Author..... Allen Huffman
'   E-mail..... alsplace@pobox.com
'   Based on... Sequencer code by Jon Williams -- Parallax, Inc.
'   Started.... 02 OCT 2005
'   Updated.... 07 JUN 2005
'
'   {$STAMP BS1}
'   {$PBASIC 1.0}
'
' =========================================================================

' -----[ Program Description ]---------------------------------------------

' Quick 'n dirty example of using one Prop-1 controller to independently
' sequence two different sequences. Each sequence must define it's start
' and stop range in the EEPROM space, and specify a bitmask to indicate
' which bits belong to that sequence. i.e., if PIN0, PIN1, and PIN2 were
' used by the sequence, the mask would be %11111000. This allows masking
' off bits that do not belong to the sequence when updating the pins. There
' may be a better way to do this...
'
' Note that delay is not constant; it depends on how much code is being
' cranked through, so it's just an approximate. You may be able to figure
' out what DelayRes value and what data value are closest to the time you
' want, but I currently use trial and error.
'
' This example monitors Trigger1 (PIN7) and Trigger2 (PIN6) then starts
' the light blinking sequence. Using a Prop-1 Trainer is an excellent way
' to see this. Every Prop-1 owner should have a Prop-1 Trainer. They are
' great. Anyway... There is a GOTO Start1/Start2 line commented out. By
' uncommenting it, the sequences will just continually fire.  On a Trainer,
' the button is PIN6 (Trigger2), so I let Trigger1 auto-test and use the
' button to fire off Trigger2.
'
' The footprint is a bit large, but it should have room for about 56 steps
' of combined sequences.
'
' I have also expanded this routine to support three sequences, and can
' provide that code if requested. -- Allen

' -----[ Revision History ]------------------------------------------------

' 03 OCT 2005 - 1.0 - First released version.

' -----[ I/O Definitions ]-------------------------------------------------

SYMBOL  Trigger1         = PIN7                ' from trigger device
SYMBOL  Trigger2         = PIN6

' -----[ Constants ]-------------------------------------------------------

SYMBOL  Pressed          = 1    ' for active-high input
SYMBOL  NotPressed       = 0

SYMBOL  Yes              = 1
SYMBOL  No               = 0

SYMBOL  DelayRes         = 25   ' delay multiplier

' -----[ Variables ]-------------------------------------------------------

SYMBOL  seq1             = B0   ' seq1 running (Yes/No)
SYMBOL  pntr1            = B1   ' record pointer
SYMBOL  counter1         = B2   ' countdown timer (for timing)

SYMBOL  seq2             = B3   ' seq1 running (Yes/No)
SYMBOL  pntr2            = B4   ' record pointer
SYMBOL  counter2         = B5   ' countdown timer (for timing)

SYMBOL  pinstatus        = B6   ' current pin status
SYMBOL  pntr             = B7   ' temp pntr into EEPROM area
SYMBOL  cntl             = B8   ' temp ctrl byte from EEPROM area
SYMBOL  timer            = B9   ' temp timer byte from EEPROM area
SYMBOL  seqmask          = B10  ' temp bitmask

' -----[ EEPROM Data ]-----------------------------------------------------

' Sequence Database
' -- each entry has two bytes: outputs, timing (1 - 255 units x DelayRes)

SYMBOL  seq1start       = 0                             ' starting offset
SYMBOL  seq1mask        = %11111000                     ' which bits are ours?
Sequence1:
  EEPROM (%00000001, 3)
  EEPROM (%00000010, 3)
  EEPROM (%00000100, 3)
  EEPROM (%00000010, 3)
  EEPROM (%00000001, 0)
  EEPROM (%00000001, 0)
  EEPROM (%00000100, 0)                                 ' end of sequence

SYMBOL  seq2start       = 14                            ' starting offset
SYMBOL  seq2mask        = %11000111                     ' which bits are ours?
Sequence2:
  EEPROM (%00100000, 2)
  EEPROM (%00010000, 2)
  EEPROM (%00001000, 2)
  EEPROM (%00010000, 2)
  EEPROM (%00100000, 2)
  EEPROM (%00000000, 0)                                 ' end of sequence

' -----[ Initialization ]--------------------------------------------------

Reset:
  DIRS = %00111111                                      ' P0 - P5 are outputs

' -----[ Program Code ]----------------------------------------------------

Main:
  IF Trigger1 = Pressed THEN Start1                     ' wait for trigger
  ' GOTO Start1                                         ' uncomment to auto-test
Main2:
  IF Trigger2 = Pressed THEN Start2
  ' Goto Start2                                         ' uncomment to auto-test
Main3:
  GOSUB Process1                                        ' processes sequences
  GOTO Main                                             ' repeat

Start1:
  IF seq1 = Yes THEN Main2                              ' skip if already running
  seq1 = Yes                                            ' flag seq1 as running
  counter1 = 0                                          ' reset seq1 counter
  pntr1 = seq1start                                     ' point to start of sequence1
  GOTO Main2                                            ' continue...

Start2:
  IF seq2 = Yes THEN Main3                              ' skip if already running
  seq2 = Yes                                            ' flag seq2 as running
  counter2 = 0                                          ' reset seq2 counter
  pntr2 = seq2start                                     ' point to start of sequence2
  GOTO Main3                                            ' continue...

Process1:
  IF seq1 = No THEN Process2                            ' skip if seq1 not running
  IF counter1 > 0 THEN Delay1                           ' in progress? just delay

  seqmask = seq1mask                                    ' else load mask
  pntr = pntr1                                          ' load pointer
  GOSUB ProcessRecord                                   ' process entry
  pntr1 = pntr1 + 2                                     ' increment pointer
  IF timer = 0 THEN Stop1                               ' if zero, end of sequence
  counter1 = timer * DelayRes                           ' else calc time delay

Delay1:
  counter1 = counter1 - 1                               ' decrement counter

Process2:
  IF seq2 = No THEN Process3                            ' see Process1...
  IF counter2 > 0 THEN Delay2
  seqmask = seq2mask
  pntr = pntr2
  GOSUB ProcessRecord
  pntr2 = pntr2 + 2
  counter2 = timer * DelayRes
  IF timer = 0 THEN Stop2

Delay2:
  counter2 = counter2 - 1

Process3:
  RETURN

Stop1:                                                  ' mark seq1 as done
  seq1 = No
  RETURN

Stop2:
  seq2 = No                                             ' mark seq2 as done
  RETURN

' -----[ Subroutines ]-----------------------------------------------------
ProcessRecord:
  READ pntr, cntl                                       ' read outputs
  pntr = pntr + 1                                       ' point to timing byte
  READ pntr, timer                                      ' read timing byte
  pinstatus = PINS & seqmask                            ' mask off other bits
  PINS = cntl | pinstatus                               ' refresh output pins
  RETURN
