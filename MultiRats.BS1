' RATS!!!
'
' =========================================================================
'
'   File....... Dual-Sequencer-MaxOuts.BS1
'   Purpose....
'   Author..... Jon Williams -- Parallax EFX
'               -- based on code by Allen Huffman
'   E-mail..... jwilliams@parallax.com
'   Started....
'   Updated.... 05 OCT 2005
'
'   {$STAMP BS1}
'   {$PBASIC 1.0}
'
' =========================================================================


' -----[ Program Description ]---------------------------------------------
'
' This program converts the Prop-1 into a dual timer capable of simultane-
' ously and independently controlling two individual props.  The outputs
' for each prop are defined by an EEPROM table.  Each record in the table
' holds the new outputs for a given state as well as the timing for that
' state.  Bit7 of the outputs value indicates the end of the sequence. It
' is the programmer's responsibility to set Seq1Start and Seq2Start to
' the proper values before downloading the program.
'
' This program allows either sequence to access to any of the output
' pints (P0 - P5).


' -----[ Revision History ]------------------------------------------------


' -----[ I/O Definitions ]-------------------------------------------------

SYMBOL  Trigger1        = PIN7
SYMBOL  Trigger2        = PIN6


' -----[ Constants ]-------------------------------------------------------

SYMBOL  IsOn            = 1                     ' for active-high input
SYMBOL  IsOff           = 0

SYMBOL  Running         = 1                     ' statut flags
SYMBOL  Stopped         = 0

SYMBOL  Yes             = 1
SYMBOL  No              = 0

' -----[ Variables ]-------------------------------------------------------

SYMBOL  status          = B0                    ' sequence status flags
SYMBOL  seq1            = BIT0
SYMBOL  seq2            = BIT1
SYMBOL  pinsTemp        = B1                    ' temporary output
SYMBOL  endOfSeq        = BIT15                 ' 1 = end of sequence
SYMBOL  RC4Control      = BIT14                 ' 1 = emit to RC4

SYMBOL  loopTmr         = B2

SYMBOL  pntr1           = B3                    ' pointer for seq 1
SYMBOL  seq1Outs        = B4                    ' sequence 1 output(s)
SYMBOL  timer1          = B5                    ' timer for seq 1

SYMBOL  pntr2           = B6
SYMBOL  seq2Outs        = B7
SYMBOL  timer2          = B8

' -----[ EEPROM Data ]-----------------------------------------------------

' Timing value is in 100 millisecond units
' -- trigger check loop is 5 iterations x 20 ms

SYMBOL ResetDelay = 100

SYMBOL  Seq1Start       = 0                     ' start point in EE

Sequence1:
  EEPROM (%01000001, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000001, 1)
  EEPROM (%00000010, 1)
  EEPROM (%01000000, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000000, ResetDelay)
  EEPROM (%00000000, 1)
  EEPROM (%10000000, 0)                         ' end of sequence

SYMBOL  Seq2Start       = 14                    ' start point in EE

Sequence2:
  EEPROM (%01000010, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000100, 1)
  EEPROM (%00001000, 1)
  EEPROM (%01000000, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000000, 4)
  EEPROM (%01000010, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000100, 1)
  EEPROM (%00001000, 1)
  EEPROM (%01000000, 1) ' RC4, addr 00, relay 0001 on
  EEPROM (%00000000, ResetDelay)
  EEPROM (%10000000, 0)

' -----[ Initialization ]--------------------------------------------------

Reset:
  PINS = %00000000                              ' clear outputs
  DIRS = %00111111                              ' set to output mode

  pntr1 = Seq1Start                             ' initialize pointers
  pntr2 = Seq2Start

' -----[ Program Code ]----------------------------------------------------

Main:                                           ' test triggers, pad loop
  FOR loopTmr = 1 TO 5                          ' text 5x
    seq1 = seq1 | Trigger1                      ' update running flag
    seq2 = seq2 | Trigger2                      ' update running flag
    PAUSE 20                                    ' 5 x 20 ms = 100 ms
  NEXT

Run_1:
  IF seq1 = Stopped THEN Run_2                  ' running?
    IF timer1 = 0 THEN Reload_1                 '  yes, timer expried?
      timer1 = timer1 - 1                       '   no, decrement timer
      GOTO Run_2

Reload_1:
  READ pntr1, pinsTemp                          ' read output state
  seq1Outs = pinsTemp                           ' copy to s1 storage
  PINS = seq1Outs | seq2Outs                    ' apply new outputs
  pntr1 = pntr1 + 1                             ' point to timing
  READ pntr1, timer1                            ' read it
  pntr1 = pntr1 + 1                             ' point to next record
  IF endOfSeq = No THEN Run_2                   ' at end?
    seq1 = Stopped                              ' - stop sequence
    pntr1 = Seq1Start                           ' - reset pointer

Run_2:
  IF seq2 = Stopped THEN Main                   ' running?
    IF timer2 = 0 THEN Reload_2                 '  yes, timer expried?
      timer2 = timer2 - 1                       '   no, decrement timer
      GOTO Main

Reload_2:
  READ pntr2, pinsTemp                          ' read output state
  ' Check for RC4 control bit
  IF RC4Control = No THEN Skip_2
  DEBUG "RC4 ", pinsTemp, CR
Skip_2:
  seq2Outs = pinsTemp                           ' copy to s2 storage
  PINS = seq1Outs | seq2Outs                    ' apply new outputs
  pntr2 = pntr2 + 1                             ' point to timing
  READ pntr2, timer2                            ' read it
  pntr2 = pntr2 + 1                             ' point to next record
  IF endOfSeq = No THEN Main
  IF endOfSeq = No THEN Main                    ' at end?
    seq2 = Stopped                              ' - stop sequence
    pntr2 = Seq2Start                           ' - reset pointer

  GOTO Main

' -----[ Subroutines ]-----------------------------------------------------